[gd_scene load_steps=13 format=3 uid="uid://j7ejk7u1a1da"]

[ext_resource type="Shader" path="res://voxels.gdshader" id="1_ox2fy"]
[ext_resource type="Script" path="res://animation_player.gd" id="2_dogra"]

[sub_resource type="BoxMesh" id="BoxMesh_pik5d"]

[sub_resource type="Shader" id="Shader_cak3m"]
code = "shader_type spatial;
render_mode unshaded;

uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_nearest;

uniform float voxel_size : hint_range(0.001, 1.0, 0.001) = 0.1;

vec3 screen(vec3 a, vec3 b) {
	return (1. - ((1. - a) * (1. - b)));
}

vec2 pixel_from_view(vec3 pos, mat4 pm, vec2 view_size) {
	vec4 pcs = pm * vec4(pos, 1.0);
	vec2 ndc = pcs.xy / pcs.w;
	return (ndc.xy * 0.5 + 0.5) * view_size;
}

vec3 hash(vec3 p) {
    p = vec3(dot(p, vec3(127.1, 311.7, 74.7)), dot(p, vec3(269.5,183.3,246.1)), dot(p, vec3(113.5, 271.9, 124.6)));
    p = fract(sin(p) * 43758.5453123);
    return p;
}

uniform float step_ratio = 1.0;
uniform int steps = 20;
uniform float depth = 1.0;
uniform float depth_falloff : hint_range(0.01, 1.0, 0.01) = 0.3;
uniform float y_falloff : hint_range(0.01, 2.0, 0.01) = 0.3;

float traverse_voxels(vec3 origin, vec3 direction, mat4 mvm, mat4 pm, vec2 view_size, vec2 screen_uv) {
	vec3 ray_step = normalize(direction) * voxel_size * step_ratio;
	vec3 current = origin;
	for(int i = 0; i < steps; i++) {
		vec3 current_voxel = round(current / voxel_size) * voxel_size;
		vec3 voxel_rand = current_voxel + (hash(current_voxel + 5.) - 0.5) * voxel_size;
		vec3 rand = hash(current_voxel + 10.);
		
		vec2 voxel_coord = pixel_from_view((mvm * vec4(voxel_rand, 1.0)).xyz, pm, view_size);
		vec2 pixel_coord = screen_uv * view_size;
		
		if(ivec2(voxel_coord) == ivec2(pixel_coord)) {
			float time_intensity = pow(sin((TIME + (rand.x * 1.25)) * PI) * 0.5 + 0.5, 2.0);
			float ray_length = length(origin - current);
			float intensity = clamp(pow(depth_falloff, ray_length / depth) * pow(current.y + 0.5, 1.0/y_falloff), 0., 1.) * 1.5;
			return intensity * time_intensity;
		}
		current += ray_step;
	}
	return pow(hash(origin).x, 8.) * 0.;
}

uniform vec3 color_a : source_color;
uniform vec3 color_b : source_color;

void fragment() {
	vec4 prev_color = texelFetch(screen_texture, ivec2(SCREEN_UV * VIEWPORT_SIZE), 0);
	
	mat4 INV_MODEL_MATRIX = inverse(MODEL_MATRIX);
	mat4 INV_MODELVIEW_MATRIX = INV_MODEL_MATRIX * INV_VIEW_MATRIX;
	vec3 model_fragcoord = (INV_MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).xyz;
	vec3 camera_coord = (INV_MODEL_MATRIX * vec4(CAMERA_POSITION_WORLD, 1.0)).xyz;
	vec3 ray_direction = normalize(model_fragcoord - camera_coord);
	vec3 target = vec3(0., 0., 0.);
	//vec3 tdist = (model_fragcoord - target) - (dot(model_fragcoord - target, ray_direction) * ray_direction);
	//vec3 model_fragcoord = (inverse(MODEL_MATRIX) * INV_VIEW_MATRIX * vec4(0.0, VERTEX.yz, 1.0)).xyz;
	//ALBEDO = screen(prev_color.rgb, vec3(pow(1. - length(tdist), 5.0), 0., 0.));
	//ALBEDO = model_fragcoord;
	float val = traverse_voxels(model_fragcoord, ray_direction, VIEW_MATRIX * MODEL_MATRIX, PROJECTION_MATRIX, VIEWPORT_SIZE, SCREEN_UV);
	vec3 depth_color = mix(color_a, color_b, val);
	ALBEDO = screen(prev_color.rgb, depth_color);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_vfagr"]
render_priority = 0
shader = SubResource("Shader_cak3m")
shader_parameter/voxel_size = 0.075
shader_parameter/step_ratio = 0.75
shader_parameter/steps = 16
shader_parameter/depth = 1.0
shader_parameter/depth_falloff = 0.2
shader_parameter/y_falloff = 0.7
shader_parameter/color_a = Color(0.0192, 0.03936, 0.12, 1)
shader_parameter/color_b = Color(1.54018e-06, 0.999987, 0.700024, 1)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_6ppyt"]
next_pass = SubResource("ShaderMaterial_vfagr")
specular_mode = 1
albedo_color = Color(0.160754, 0.160754, 0.160754, 1)
roughness = 0.05

[sub_resource type="BoxMesh" id="BoxMesh_bp7r3"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_0rdim"]
render_priority = 0
shader = ExtResource("1_ox2fy")
shader_parameter/voxel_size = 0.1
shader_parameter/steps = 50
shader_parameter/entrance_bias = 0.001

[sub_resource type="Animation" id="Animation_7xdje"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("CameraRig:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(0, 0, 0)]
}

[sub_resource type="Animation" id="Animation_mvp4x"]
resource_name = "rotate"
length = 10.0
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("CameraRig:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 10),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector3(0, 0, 0), Vector3(0, 6.28319, 0)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_6ef1o"]
_data = {
"RESET": SubResource("Animation_7xdje"),
"rotate": SubResource("Animation_mvp4x")
}

[sub_resource type="Environment" id="Environment_3r6f5"]
background_mode = 1
background_color = Color(0.162296, 0.262639, 0.327356, 1)
ambient_light_color = Color(1, 1, 1, 1)

[node name="Node3D" type="Node3D"]

[node name="StarMesh" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 2)
mesh = SubResource("BoxMesh_pik5d")
surface_material_override/0 = SubResource("StandardMaterial3D_6ppyt")

[node name="VoxelMesh" type="MeshInstance3D" parent="."]
mesh = SubResource("BoxMesh_bp7r3")
surface_material_override/0 = SubResource("ShaderMaterial_0rdim")

[node name="CameraRig" type="Node3D" parent="."]

[node name="Camera3D" type="Camera3D" parent="CameraRig"]
transform = Transform3D(1, 0, 0, 0, 0.947222, 0.32058, 0, -0.32058, 0.947221, 0, 1.82171, 5.64756)
projection = 1
fov = 15.0
size = 2.0

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_6ef1o")
}
script = ExtResource("2_dogra")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_3r6f5")

[node name="OmniLight3D" type="OmniLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -2.10069, 1.94011, 0.463729)
light_energy = 10.0
